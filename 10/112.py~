import sys  

reload(sys)  
sys.setdefaultencoding('utf8')

import codecs   

with codecs.open("s/positive.txt", "r", "latin-1") as inputfile:
    short_pos=inputfile.read()  

with codecs.open("s/negative.txt", "r", "latin-1") as inputfile:
    short_neg=inputfile.read()    

import nltk
import random
#from nltk.corpus import movie_reviews
from nltk.classify.scikitlearn import SklearnClassifier
import pickle
from sklearn.naive_bayes import MultinomialNB, BernoulliNB
from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC
from nltk.classify import ClassifierI
from statistics import mode
from send_ import word_tokenize,pos_tag



class VoteClassifier(ClassifierI):
    def __init__(self, *classifiers):
        self._classifiers = classifiers

    def classify(self, features):
        votes = []
        for c in self._classifiers:
            v = c.classify(features)
            votes.append(v)
        return mode(votes)

    def confidence(self, features):
        votes = []
        for c in self._classifiers:
            v = c.classify(features)
            votes.append(v)

        choice_votes = votes.count(mode(votes))
        conf = choice_votes / len(votes)
        return conf
    
short_pos = open("s/positive.txt","r").read()
short_neg = open("s/negative.txt","r").read()
print('datasets loaded')
# print(short_pos)
# print(short_neg)
# move this up here
all_words = []
documents = []


#  j is adject, r is adverb, and v is verb
#allowed_word_types = ["J","R","V"]
allowed_word_types = ["J"]
print("pos")
for p in short_pos.split('\n'):
    pos = pos_tag(p)
    if pos == 'error':
        print('error_pos')
        continue
    documents.append( (p, "pos") )
    for w in pos:
        try:
            if w[1][0] in allowed_word_types:
                all_words.append(w[0].lower())
        except:
            pass

print("neg")  
for p in short_neg.split('\n'):
    pos = pos_tag(p)
    if pos == 'error':
       print('error_neg')
       continue
    documents.append((p, "neg"))
    for w in pos:
        try:
            if w[1][0] in allowed_word_types:
                all_words.append(w[0].lower())
        except:
            pass


print("documents.pickle")
save_documents = open("sr/documents.pickle","wb")
pickle.dump(documents, save_documents)
save_documents.close()

print("all words")
all_words = nltk.FreqDist(all_words)


word_features = list(all_words.keys())[:5000]

print("word_features5k.pickle")
save_word_features = open("sr/word_features5k.pickle","wb")
pickle.dump(word_features, save_word_features)
save_word_features.close()


def find_features(document):
    words = word_tokenize(document)
    if words == 'error':
        return 'error'
    features = {}
    for w in word_features:
        features[w] = (w in words)

    return features

featuresets = []
for (rev, category) in documents:
    try:
      kk = find_features(rev)
      if kk == 'error':
          print('feature_error')
          continue
      featuresets.append((kk,category))
    except:
      continue 



random.shuffle(featuresets)
print(len(featuresets))

testing_set = featuresets[10000:]
training_set = featuresets[:10000]


# classifier = nltk.NaiveBayesClassifier.train(training_set)
# print("Original Naive Bayes Algo accuracy percent:", (nltk.classify.accuracy(classifier, testing_set))*100)
# classifier.show_most_informative_features(15)

print("###############")
# save_classifier = open("sr/originalnaivebayes5k.pickle","wb")
# pickle.dump(classifier, save_classifier)
# save_classifier.close()

MNB_classifier = SklearnClassifier(MultinomialNB())
MNB_classifier.train(training_set)
print("MNB_classifier accuracy percent:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)

save_classifier = open("sr/MNB_classifier5k.pickle","wb")
pickle.dump(MNB_classifier, save_classifier)
save_classifier.close()

BernoulliNB_classifier = SklearnClassifier(BernoulliNB())
BernoulliNB_classifier.train(training_set)
print("BernoulliNB_classifier accuracy percent:", (nltk.classify.accuracy(BernoulliNB_classifier, testing_set))*100)

save_classifier = open("sr/BernoulliNB_classifier5k.pickle","wb")
pickle.dump(BernoulliNB_classifier, save_classifier)
save_classifier.close()

LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
LogisticRegression_classifier.train(training_set)
print("LogisticRegression_classifier accuracy percent:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

save_classifier = open("sr/LogisticRegression_classifier5k.pickle","wb")
pickle.dump(LogisticRegression_classifier, save_classifier)
save_classifier.close()


LinearSVC_classifier = SklearnClassifier(LinearSVC())
LinearSVC_classifier.train(training_set)
print("LinearSVC_classifier accuracy percent:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

save_classifier = open("sr/LinearSVC_classifier5k.pickle","wb")
pickle.dump(LinearSVC_classifier, save_classifier)
save_classifier.close()


##NuSVC_classifier = SklearnClassifier(NuSVC())
##NuSVC_classifier.train(training_set)
##print("NuSVC_classifier accuracy percent:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)


SGDC_classifier = SklearnClassifier(SGDClassifier())
SGDC_classifier.train(training_set)
print("SGDClassifier accuracy percent:",nltk.classify.accuracy(SGDC_classifier, testing_set)*100)

save_classifier = open("sr/SGDC_classifier5k.pickle","wb")
pickle.dump(SGDC_classifier, save_classifier)
save_classifier.close()
